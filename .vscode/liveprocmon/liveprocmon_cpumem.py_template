#!/usr/bin/env python

PATH_TO_EXECUTABLE = 'LIVEPROCMON_TEMPLATE_PATH_TO_EXECUTABLE'
MAX_POINTS_TO_COLLECT = LIVEPROCMON_TEMPLATE_MAX_POINTS_TO_COLLECT
UPDATE_FREQUECY_MS = LIVEPROCMON_TEMPLATE_UPDATE_FREQUECY_MS
PLOT_WIDTH_INCH = LIVEPROCMON_TEMPLATE_PLOT_WIDTH_INCH
PLOT_HEIGHT_INCH = LIVEPROCMON_TEMPLATE_PLOT_HEIGHT_INCH


import os, subprocess, time, datetime
from matplotlib import pyplot as plt

EXECUTABLE_NAME = os.path.basename(PATH_TO_EXECUTABLE)
PLOT_FILE_NAME = EXECUTABLE_NAME+'.png'
LOG_FILE_NAME = EXECUTABLE_NAME+'.log'

time_data = []
cpu_data = []
mem_data = []

PID = -1
GET_PID_CMD = "pidof '{}'".format(PATH_TO_EXECUTABLE)
def get_target_process_PID():
    global PID
    PID = -1
    while PID == -1:
        try:
            output_buf = subprocess.check_output(GET_PID_CMD, shell=True, text=True).strip()
            with open(LOG_FILE_NAME, 'a') as log_file:
                log_file.write(GET_PID_CMD + " >>> " + output_buf + '\n')
            PID = int(output_buf)
        except:
            PID = -1
            with open(LOG_FILE_NAME, 'a') as log_file:
                log_file.write(GET_PID_CMD + '\n')
            time.sleep(1)
    return PID

def collect_data():
    
    max_cpu_perc = 0.0
    total_mem_b = 0
    timestamp_ms = 0
    command = "ps -p {} -o %cpu,rss --no-headers".format(get_target_process_PID())

    try:
        output_buf = subprocess.check_output(command, shell=True, text=True)
        with open(LOG_FILE_NAME, 'a') as log_file:
            log_file.write(command + " >>> " + output_buf + '\n')
        cpu_perc, mem_b = output_buf.strip().split()
        max_cpu_perc = float(cpu_perc)
        total_mem_b = int(mem_b)
    except:
        max_cpu_perc = 0.0
        total_mem_b = 0
        with open(LOG_FILE_NAME, 'a') as log_file:
            log_file.write(command + '\n')
    
    timestamp_ms = int(time.time_ns()/1000000)

    if len(time_data) > MAX_POINTS_TO_COLLECT:
        time_data.pop(0)
    time_data.append(timestamp_ms)

    if len(cpu_data) > MAX_POINTS_TO_COLLECT:
        cpu_data.pop(0)
    cpu_data.append(max_cpu_perc)

    if len(mem_data) > MAX_POINTS_TO_COLLECT:
        mem_data.pop(0)
    mem_data.append(total_mem_b)

    print(" {} at {} [ TS: {} ms | CPU: {:.1f} % | MEM: {} bytes ]".format(EXECUTABLE_NAME, datetime.datetime.now().time().isoformat(timespec='milliseconds'), timestamp_ms, max_cpu_perc, total_mem_b))

def generate_plot_image():

    fig, (ax_cpu, ax_mem) = plt.subplots(2)
    fig.set_size_inches(PLOT_WIDTH_INCH, PLOT_HEIGHT_INCH)

    ax_cpu.set_xlabel('Timestamp (ms)')
    ax_cpu.set_ylabel('CPU (%)')
    ax_cpu.grid(color = 'gray', linestyle = '--', linewidth = 0.5)
    
    ax_mem.set_xlabel('Timestamp (ms)')
    ax_mem.set_ylabel('MEM (Bytes)')
    ax_mem.grid(color = 'gray', linestyle = '--', linewidth = 0.5)

    ax_cpu.plot(time_data, cpu_data, color = 'r', linestyle = 'solid')
    ax_mem.plot(time_data, mem_data, color = 'g', linestyle = 'solid')

    plt.savefig(PLOT_FILE_NAME, bbox_inches='tight')
    plt.close()

def generate_index_html():

    if os.path.exists(PLOT_FILE_NAME):
        os.remove(PLOT_FILE_NAME)
    if os.path.exists(LOG_FILE_NAME):
        os.remove(LOG_FILE_NAME)

    with open('index.html', 'w') as index_html:
        index_html.write("<!DOCTYPE html><body>")
        index_html.write('<script>')
        index_html.write('var counter = 0;')
        index_html.write('function replaceSrc()')
        index_html.write('{')
        index_html.write('    var images = document.getElementsByTagName("img");')
        index_html.write('    for(var i = 0; i < images.length; i++)')
        index_html.write('    {')
        index_html.write('        var img = images[i];')
        index_html.write('        if(img.src.length >= 0 & img.id != "idImageNoTimestamp")')
        index_html.write('        {')
        index_html.write('            img.src = img.src + "?" + (counter++);')
        index_html.write('        }')
        index_html.write('    }')
        index_html.write('    setTimeout(replaceSrc, {})'.format(UPDATE_FREQUECY_MS))
        index_html.write('}')
        index_html.write('replaceSrc()')
        index_html.write('</script>')
        index_html.write('<img id="plotimg" src="{}">'.format(PLOT_FILE_NAME))
        index_html.write("</body></html>")
