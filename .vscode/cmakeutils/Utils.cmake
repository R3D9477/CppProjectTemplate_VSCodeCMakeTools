#------------------------------------------------------------------------------------------------------
# Scan project's sources folders.

set(SOURCE_MASK *.c *.cc *.cpp *.cxx *.c++ *.h *.hh *.hpp *.hxx *.h++ *.tcc *.tpp *.ipp *.qrc)

function(get_sources_from_dir DEST_SRCs_VAR DEST_INCs_VAR SRC_DIR)
    unset(DIR_SRCs_FOUND)
    foreach(SRC_MASK ${SOURCE_MASK})
        file(GLOB DIR_SRCs "${SRC_DIR}/${SRC_MASK}")
        if(NOT "${DIR_SRCs}" STREQUAL "")
            set(DIR_SRCs_FOUND true)
            get_filename_component(DIR_SRCs "${DIR_SRCs}" ABSOLUTE)
            if(NOT "${DIR_SRCs}" IN_LIST ${DEST_SRCs_VAR})
                list(APPEND ${DEST_SRCs_VAR} ${DIR_SRCs})
                set(${DEST_SRCs_VAR} ${${DEST_SRCs_VAR}} PARENT_SCOPE)
            endif()
        endif()
    endforeach()
    if(${DIR_SRCs_FOUND})
        get_filename_component(SRC_DIR "${SRC_DIR}" ABSOLUTE)
        if(NOT "${SRC_DIR}" IN_LIST ${DEST_INCs_VAR})
            list(APPEND ${DEST_INCs_VAR} ${SRC_DIR})
            set(${DEST_INCs_VAR} ${${DEST_INCs_VAR}} PARENT_SCOPE)
        endif()
    endif()
endfunction()

foreach(SRC_FOLDER ${SCAN_SOURCES_FOLDER})
    get_sources_from_dir(${PROJECT_NAME}_SOURCES ${PROJECT_NAME}_INCLUDES ${SRC_FOLDER})
endforeach()

#------------------------------------------------------------------------------------------------------

set(IS_IN_CONANFILE FALSE)
file(READ "${CMAKE_SOURCE_DIR}/conanfile.txt" CONAN_PACKAGES)
function(IS_CONANFILE_CONTAINS EXT_PKG_NAME IS_IN_CONANFILE)
    set(IS_IN_CONANFILE FALSE)
    if("${CONAN_PACKAGES}" MATCHES "${EXT_PKG_NAME}")
        set(IS_IN_CONANFILE TRUE)
    endif()
    return (PROPAGATE IS_IN_CONANFILE)
endfunction()

set(IS_IN_VCPKGFILE FALSE)
file(READ "${CMAKE_SOURCE_DIR}/vcpkg.json" VCPKG_PACKAGES)
function(IS_VCPKG_CONTAINS EXT_PKG_NAME IS_IN_VCPKGFILE)
    set(IS_IN_VCPKGFILE FALSE)
    if("${VCPKG_PACKAGES}" MATCHES "${EXT_PKG_NAME}")
        set(IS_IN_VCPKGFILE TRUE)
    endif()
    return (PROPAGATE IS_IN_VCPKGFILE)
endfunction()

#------------------------------------------------------------------------------------------------------
# Scan project's unit tests sources folder.

enable_testing()

set(SOURCE_MASK_TEST *.c *.cc *.cpp *.cxx *.c++)

function(target_add_tests_from_folder TARGET_NAME FOLDER_PATH)
    set(CMAKE_CXX_FLAGS "--coverage")
    foreach(SRC_MASK_TEST ${SOURCE_MASK_TEST})
        file(GLOB TEST_SRCs "${FOLDER_PATH}/${SRC_MASK_TEST}")
        foreach(TEST_SRC ${TEST_SRCs})
            get_filename_component(TEST_NAME ${TEST_SRC} NAME_WE)
            set(TEST_TARGET_NAME ${TEST_NAME})
            add_executable(${TEST_TARGET_NAME} "${TEST_SRC}")
            target_include_directories(${TEST_TARGET_NAME} PUBLIC ${${TARGET_NAME}_INCLUDES})
            if(DEFINED ENV{VCPKG_ROOT})
                IS_VCPKG_CONTAINS("gtest" IS_IN_VCPKGFILE)
                if(${IS_IN_VCPKGFILE})
                    find_package(GTest CONFIG REQUIRED)
                    target_link_libraries(${TEST_TARGET_NAME} PRIVATE GTest::gtest GTest::gtest_main GTest::gmock GTest::gmock_main)
                    message("--> [${TEST_TARGET_NAME}] GTest added via vcpkg")
                endif()
                IS_VCPKG_CONTAINS("boost-test" IS_IN_VCPKGFILE)
                if(${IS_IN_VCPKGFILE})
                    find_package(boost_unit_test_framework CONFIG REQUIRED)
                    target_link_libraries(${TEST_TARGET_NAME} PRIVATE Boost::unit_test_framework)
                    message("--> [${TEST_TARGET_NAME}] BoostTest added via vcpkg")
                endif()
            else()
                IS_CONANFILE_CONTAINS("gtest" IS_IN_CONANFILE)
                if(${IS_IN_CONANFILE})
                    find_package(GTest REQUIRED)
                    target_link_libraries(${TEST_TARGET_NAME} PUBLIC gtest::gtest)
                    message("--> [${TEST_TARGET_NAME}] GTest added via Conan")
                endif()
                IS_CONANFILE_CONTAINS("boost" IS_IN_CONANFILE)
                if(${IS_IN_CONANFILE})
                    find_package(Boost REQUIRED COMPONENTS unit_test_framework)
                    target_link_libraries(${TEST_TARGET_NAME} PUBLIC Boost::unit_test_framework)
                    message("--> [${TEST_TARGET_NAME}] BoostTest added via Conan")
                endif()
            endif()
            get_target_property(target_type ${TARGET_NAME} TYPE)
            if (NOT target_type STREQUAL "EXECUTABLE")
                target_link_libraries(${TEST_TARGET_NAME} PUBLIC ${TARGET_NAME})
            endif()
            add_test(${TEST_TARGET_NAME} ${TEST_TARGET_NAME})
        endforeach()
    endforeach()
endfunction()
