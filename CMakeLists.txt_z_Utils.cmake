#------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------
# Scan project's sources folders.

set(SOURCE_MASK *.c *.cc *.cpp *.cxx *.c++ *.h *.hh *.hpp *.hxx *.h++ *.tcc *.tpp *.ipp *.qrc)

function(get_sources_from_dir DEST_SRCs_VAR DEST_INCs_VAR SRC_DIR)
  unset(DIR_SRCs_FOUND)
  foreach(SRC_MASK ${SOURCE_MASK})
    file(GLOB DIR_SRCs "${SRC_DIR}/${SRC_MASK}")
    if(NOT "${DIR_SRCs}" STREQUAL "")
      set(DIR_SRCs_FOUND true)
      get_filename_component(DIR_SRCs "${DIR_SRCs}" ABSOLUTE)
      if(NOT "${DIR_SRCs}" IN_LIST ${DEST_SRCs_VAR})
        list(APPEND ${DEST_SRCs_VAR} ${DIR_SRCs})
        set(${DEST_SRCs_VAR} ${${DEST_SRCs_VAR}} PARENT_SCOPE)
      endif()
    endif()
  endforeach()
  if(${DIR_SRCs_FOUND})
    get_filename_component(SRC_DIR "${SRC_DIR}" ABSOLUTE)
    if(NOT "${SRC_DIR}" IN_LIST ${DEST_INCs_VAR})
      list(APPEND ${DEST_INCs_VAR} ${SRC_DIR})
      set(${DEST_INCs_VAR} ${${DEST_INCs_VAR}} PARENT_SCOPE)
    endif()
  endif()
endfunction()

foreach(SRC_FOLDER ${SCAN_SOURCES_FOLDER})
  get_sources_from_dir(${PROJECT_NAME}_SOURCES ${PROJECT_NAME}_INCLUDES ${SRC_FOLDER})
endforeach()

#------------------------------------------------------------------------------------------------------
# Scan project's unit tests sources folder.

file(READ "conanfile.txt" CONAN_PACKAGES)
set(GTEST_REQUIRED FALSE)
set(BOOST_REQUIRED FALSE)
if("${CONAN_PACKAGES}" MATCHES "gtest")
  set(GTEST_REQUIRED TRUE)
endif()
if("${CONAN_PACKAGES}" MATCHES "boost")
  set(BOOST_REQUIRED TRUE)
endif()

enable_testing()

set(SOURCE_MASK_TEST *.c *.cc *.cpp *.cxx *.c++)

function(target_add_tests_from_folder TARGET_NAME FOLDER_PATH)
  set(CMAKE_CXX_FLAGS "--coverage")
  foreach(SRC_MASK_TEST ${SOURCE_MASK_TEST})
    file(GLOB TEST_SRCs "${FOLDER_PATH}/${SRC_MASK_TEST}")
    foreach(TEST_SRC ${TEST_SRCs})
      get_filename_component(TEST_NAME ${TEST_SRC} NAME_WE)
      set(TEST_TARGET_NAME ${TEST_NAME})
      add_executable(${TEST_TARGET_NAME} "${TEST_SRC}")
      target_include_directories(${TEST_TARGET_NAME} PUBLIC ${${TARGET_NAME}_INCLUDES})
      if(${GTEST_REQUIRED})
        find_package(GTest REQUIRED)
        target_link_libraries(${TEST_TARGET_NAME} PUBLIC gtest::gtest)
      endif()
      if(${BOOST_REQUIRED})
        find_package(Boost REQUIRED COMPONENTS unit_test_framework)
        target_link_libraries(${TEST_TARGET_NAME} PUBLIC Boost::unit_test_framework)
      endif()
      get_target_property(target_type ${TARGET_NAME} TYPE)
      if (NOT target_type STREQUAL "EXECUTABLE")
        target_link_libraries(${TEST_TARGET_NAME} PUBLIC ${TARGET_NAME})
      endif ()
      add_test(${TEST_TARGET_NAME} ${TEST_TARGET_NAME})
    endforeach()
  endforeach()
endfunction()
